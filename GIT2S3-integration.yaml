AWSTemplateFormatVersion: '2010-09-09'
Description: Git webhooks to clone and store a Git repository in S3. Used to integrate Git services
  with AWS services like AWS CodePipeline, AWS CodeBuild, and AWS CodeDeploy. (qs-1nfhrd9bh)

Parameters:
  SecretToken:
    Description: The secret token is used to authenticate access to GitLab and other Git services. API secrets cannot contain commas (,), backward slashes (\), or quotes (").
    Type: String
    NoEcho: 'true'
    AllowedPattern: '[A-Za-z0-9]+'
  OutputBucketName:
    Description: Name for the S3 bucket where the Git repository .zip file is stored. This name needs to be unique, because S3 has a global namespace
    Type: String
  ExcludeGit:
    Description: Choose True to omit the .git directory from the Git repository .zip file.
    Type: String
    Default: 'True'
    AllowedValues: ['True', 'False']

Mappings: 
  RegionMap: 
    eu-central-1: 
      "LambdaSourceBucket": "covestro-git2s3-lambda-source"
    us-east-1: 
      "LambdaSourceBucket": "covestro-git2s3-lambda-source-us-east-1"
    ap-southeast-1: 
      "LambdaSourceBucket": "covestro-git2s3-lambda-source-ap-southeast-1"

Resources:

  KeyBucket:
      Type: AWS::S3::Bucket
      Properties:
        Tags: []

  OutputBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: !Ref OutputBucketName
          VersioningConfiguration:
            Status: Enabled
          Tags: []

  KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: AWS KWS key to encrypt and decrypt SSH keys stored in S3. 
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Sid: Allow access for Key Administrators
              Effect: Allow
              Principal:
                AWS:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - :root
              Action:
                - kms:Create*
                - kms:Describe*
                - kms:Enable*
                - kms:List*
                - kms:Put*
                - kms:Update*
                - kms:Revoke*
                - kms:Disable*
                - kms:Get*
                - kms:Delete*
                - kms:ScheduleKeyDeletion
                - kms:CancelKeyDeletion
              Resource: '*'
            - Sid: Allow use of the key
              Effect: Allow
              Principal:
                AWS:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - :root
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: '*'
            - Sid: Allow attachment of persistent resources
              Effect: Allow
              Principal:
                AWS:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - :root
              Action:
                - kms:CreateGrant
                - kms:ListGrants
                - kms:RevokeGrant
              Resource: '*'
              Condition:
                Bool:
                  kms:GrantIsForAWSResource: true
  
  CreateSSHKeyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: git2cp-sshkeygen
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - !Join
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref 'KeyBucket'
                        - /crypto.zip
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - !Join
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref 'KeyBucket'
                        - /enc_key
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                  Resource:
                    - !GetAtt 'KMSKey.Arn'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:*:*:*

  CreateSSHKeyLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lambda_function.lambda_handler
        MemorySize: 128
        Role: !GetAtt CreateSSHKeyRole.Arn
        Runtime: python3.8
        Timeout: 300
        Code:
          S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", LambdaSourceBucket]
          S3Key: CreateSSHKey.zip
      
  CreateSSHKey:
        Type: AWS::CloudFormation::CustomResource
        Version: '1.0'
        Properties:
          ServiceToken: !GetAtt CreateSSHKeyLambda.Arn
          KeyBucket: !Ref KeyBucket
          Region: !Ref 'AWS::Region'
          KMSKey: !Ref KMSKey
  
  DeleteBucketContentsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: git2cp-deletebucketcontents
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: 
                    - !Sub 'arn:aws:s3:::${KeyBucket}/*'
                    - !Sub 'arn:aws:s3:::${OutputBucket}/*'
                    - !Sub 'arn:aws:s3:::${KeyBucket}'
                    - !Sub 'arn:aws:s3:::${OutputBucket}'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:*:*:*
  

  DeleteBucketContentsLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lambda_function.lambda_handler
        MemorySize: 128
        Role: !GetAtt 'DeleteBucketContentsRole.Arn'
        Runtime: python3.8
        Timeout: 300
        Code:
          S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", LambdaSourceBucket]
          S3Key: DeleteBucketContents.zip
  

  DeleteBucketContents:
      Type: AWS::CloudFormation::CustomResource
      Version: '1.0'
      DependsOn:
        - KeyBucket
        - OutputBucket
      Properties:
        ServiceToken: !GetAtt DeleteBucketContentsLambda.Arn
        KeyBucket: !Ref KeyBucket
        OutputBucket: !Ref OutputBucket

  CodeBuildServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Principal:
                  Service: "codebuild.amazonaws.com" 
              Action: 
                  - "sts:AssumeRole"
          Path: "/"
          ManagedPolicyArns:
            - !Ref CodeBuildEndpointPolicy
          Tags: 
            -
                Key: 'tagging-policy'
                Value: 'test-ok'

  CodeBuildBasePolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
          Description: Policy with base permissions for CodeBuild.
          Path: /
          Roles: 
            - !Ref CodeBuildServiceRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: "Allow"
              Action: 
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogStream"
              Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
            - Effect: "Allow"
              Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
              Resource:
                  - !GetAtt KeyBucket.Arn
                  - !Sub "${KeyBucket.Arn}/*"
            - Effect: "Allow"
              Action:
                  - "s3:PutObject"
              Resource:
                  - !GetAtt OutputBucket.Arn
                  - !Sub "${OutputBucket.Arn}/*"
            - Effect: "Allow"
              Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
              Resource:
                  - !GetAtt KMSKey.Arn

  CodeBuildEndpointPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
          Description: Policy with permissions enabling CodeBuild to work with endpoints.
          Path: /
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:DescribeDhcpOptions'
                    - 'ec2:DescribeNetworkInterfaces'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DescribeSubnets'
                    - 'ec2:DescribeSecurityGroups'
                    - 'ec2:DescribeVpcs'
                Resource: '*'
              - Effect: Allow
                Action:
                    - 'ec2:CreateNetworkInterfacePermission'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'

  GitPullRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: git2cp-gitpull
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - !GetAtt 'KMSKey.Arn'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - !Sub 'arn:aws:s3:::${OutputBucket}'
                    - !Sub 'arn:aws:s3:::${OutputBucket}/*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - !Sub 'arn:aws:s3:::${KeyBucket}/enc_key'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - codebuild:StartBuild
                    - codebuild:BatchGetBuilds
                  Resource:
                    - !GetAtt GitPullCodeBuild.Arn
                - Effect: Allow
                  Action:
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:DescribeDhcpOptions'
                    - 'ec2:DescribeNetworkInterfaces'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DescribeSubnets'
                    - 'ec2:DescribeSecurityGroups'
                    - 'ec2:DescribeVpcs'
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - 'ec2:CreateNetworkInterfacePermission'
                  Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'

  GitPullCodeBuild:
      Type: AWS::CodeBuild::Project
      Properties:
        Artifacts:
          Type: NO_ARTIFACTS
        Environment:
          Image: aws/codebuild/standard:3.0
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_SMALL
        QueuedTimeoutInMinutes: 60
        ServiceRole: !GetAtt CodeBuildServiceRole.Arn
        Source:
          BuildSpec: |
              version: 0.2
              env:
                exported-variables:
                  - GIT_COMMIT_ID
                  - GIT_COMMIT_MSG
              phases:
                install:
                    runtime-versions:
                        python: 3.8
                    # commands:
                    # - pip3 install boto3
                build:
                    commands:
                    - echo "=======================Start-Deployment============================="
                    - echo "Getting the SSH Private Key"
                    - |
                      python3 - << "EOF"
                      from boto3 import client
                      import os
                      s3 = client('s3')
                      kms = client('kms')
                      enckey = s3.get_object(Bucket=os.getenv('KeyBucket'), Key=os.getenv('KeyObject'))['Body'].read()
                      privkey = kms.decrypt(CiphertextBlob=enckey)['Plaintext']
                      with open('enc_key.pem', 'w') as f:
                          print(privkey.decode("utf-8"), file=f)
                      EOF
                    - mv ./enc_key.pem ~/.ssh/id_rsa
                    - ls ~/.ssh/
                    - echo "Setting SSH config profile"
                    - | 
                      cat > ~/.ssh/config <<EOF
                      Host *
                        AddKeysToAgent yes
                        StrictHostKeyChecking no
                        IdentityFile ~/.ssh/id_rsa
                      EOF
                    - chmod 600 ~/.ssh/id_rsa
                    - echo "Cloning the repository $GitUrl on branch $Branch"
                    - git clone --single-branch --depth=1 --branch $Branch $GitUrl .
                    - ls
                    - echo "Zipping the checked out contents"
                    - |
                      if [ "$exclude_git" = "True" ]; then
                        zip -r $outputbucketkey ./ -x '*.git*'
                      else 
                        zip -r $outputbucketkey ./
                      fi
                    - ls -alh
                    - echo "Put the zipped Object to Output Bucket"
                    - export GIT_COMMIT_ID=$(git rev-parse HEAD)
                    - aws s3 cp $outputbucketkey s3://$outputbucket/$outputbucketpath --metadata "{\"commit\":\"${GIT_COMMIT_ID}\"}" # --sse aws:kms --sse-kms-key-id $CodePipelineArtifactKMSKeyId
                    - echo $GIT_COMMIT_ID
                    - export GIT_COMMIT_MSG="$(git log -1 --pretty=%B)"
                    - echo $GIT_COMMIT_MSG
                    - echo "=======================End-Deployment============================="
          Type: NO_SOURCE
        TimeoutInMinutes: 14

  GitPullLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lambda_function.lambda_handler
        MemorySize: 128
        Role: !GetAtt GitPullRole.Arn
        Runtime: python3.8
        Timeout: 900
        Environment:
          Variables:
            ExcludeGit: !Ref ExcludeGit
            GitPullCodeBuild: !Ref GitPullCodeBuild
        Code:
            S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", LambdaSourceBucket]
            S3Key: GitPullS3.zip

  WebHookRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        Policies:
          - PolicyName: git2cp-webhook
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeAsync
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt GitPullLambda.Arn
    
  WebHookApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Body:
          swagger: '2.0'
          info:
            version: '2016-07-26T07:34:38Z'
            title: !Sub 'G2CP-${AWS::StackName}'
          schemes:
            - https
          paths:
            /gitpull:
              post:
                consumes:
                  - application/json
                produces:
                  - application/json
                responses:
                  '200':
                    description: 200 response
                    schema:
                      $ref: '#/definitions/Empty'
                x-amazon-apigateway-integration:
                  type: aws
                  credentials: !GetAtt 'WebHookRole.Arn'
                  responses:
                    default:
                      statusCode: '200'
                  requestParameters:
                    integration.request.header.X-Amz-Invocation-Type: '''Event'''
                  passthroughBehavior: when_no_templates
                  httpMethod: POST
                  uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/${GitPullLambda.Arn}/invocations'
                  requestTemplates:
                    application/json: !Join
                      - ''
                      - - "#set($allParams = $input.params())\n"
                        - "{\n"
                        - "\"body-json\" : $input.json('$'),\n"
                        - "\"params\" : {\n"
                        - "#foreach($type in $allParams.keySet())\n"
                        - "    #set($params = $allParams.get($type))\n"
                        - "\"$type\" : {\n"
                        - "    #foreach($paramName in $params.keySet())\n"
                        - "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                          \n"
                        - "        #if($foreach.hasNext),#end\n"
                        - "    #end\n"
                        - "}\n"
                        - "    #if($foreach.hasNext),#end\n"
                        - "#end\n"
                        - "},\n"
                        - "\"stage-variables\" : {\n"
                        - "#foreach($key in $stageVariables.keySet())\n"
                        - "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                          \n"
                        - "    #if($foreach.hasNext),#end\n"
                        - "#end\n"
                        - "},\n"
                        - "\"context\" : {\n"
                        - "    \"account-id\" : \"$context.identity.accountId\",\n"
                        - "    \"api-id\" : \"$context.apiId\",\n"
                        - "    \"api-key\" : \"$context.identity.apiKey\",\n"
                        - "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\"\
                          ,\n"
                        - "    \"caller\" : \"$context.identity.caller\",\n"
                        - "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                          ,\n"
                        - "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                          ,\n"
                        - "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                          ,\n"
                        - "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                          ,\n"
                        - "    \"http-method\" : \"$context.httpMethod\",\n"
                        - "    \"stage\" : \"$context.stage\",\n"
                        - "    \"source-ip\" : \"$context.identity.sourceIp\",\n"
                        - "    \"user\" : \"$context.identity.user\",\n"
                        - "    \"user-agent\" : \"$context.identity.userAgent\",\n"
                        - "    \"user-arn\" : \"$context.identity.userArn\",\n"
                        - "    \"request-id\" : \"$context.requestId\",\n"
                        - "    \"resource-id\" : \"$context.resourceId\",\n"
                        - "    \"resource-path\" : \"$context.resourcePath\",\n"
                        - "    \"allowed-ips\" : \"$stageVariables.allowedips\",\n"
                        - "    \"api-secrets\" : \"$stageVariables.apisecrets\",\n"
                        - '    "key-bucket" : "'
                        - !Ref 'KeyBucket'
                        - "\",\n"
                        - "    \"output-bucket\" : \"$stageVariables.outputbucket\"\
                          ,\n"
                        - '    "public-key" : "'
                        - !Ref 'CreateSSHKey'
                        - "\",\n"
                        - "    \"raw-body\" : \"$util.escapeJavaScript($input.body).replace(\"\
                          \\'\",\"'\")\"\n"
                        - "    }\n"
                        - '}'
          securityDefinitions:
            sigv4:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: awsSigv4
          definitions:
            Empty:
              type: object

  WebHookApiDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref WebHookApi
        StageName: DevStage

  WebHookApiProdStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId: !Ref WebHookApiDeployment
        RestApiId: !Ref WebHookApi
        StageName: Prod
        Variables:
          outputbucket: !Ref OutputBucket
          apisecrets: !Ref SecretToken

Outputs:

  PublicSSHKey:
    Value: !Ref CreateSSHKey

  GitPullWebHookApi:
    Value: !Sub 'https://${WebHookApi}.execute-api.${AWS::Region}.amazonaws.com/${WebHookApiProdStage}/gitpull'

  OutputBucketName:
    Value: !Ref 'OutputBucket'